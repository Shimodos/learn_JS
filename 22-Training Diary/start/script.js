"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
const buttonReset = document.querySelector(".btn__reset");

class Workout {
  date = new Date();
  id = (Date.now() + "").slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }
  _setDescription() {
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ]; // –ú–∞—Å—Å–∏–≤ –º–µ—Å—è—Ü–µ–≤
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }
}

class Running extends Workout {
  type = "running";
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace(); // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    this._setDescription();
  }

  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = "cycling";
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed(); // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    this._setDescription();
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

class App {
  _workouts = [];
  _map;
  _mapEvent;

  // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  constructor() {
    this._getPosition();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ local storage
    this._getLocalStorage();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ñ–æ—Ä–º–µ
    form.addEventListener("submit", this._newWorkout.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    inputType.addEventListener("change", this._toggleElevationField.bind(this));
    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),

        function () {
          alert("Could not get your position");
        },
      );
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–µ
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    const coords = [latitude, longitude];

    this._map = L.map("map").setView(coords, 13);

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this._map);

    this._map.on("click", this._showForm.bind(this));

    this._workouts.forEach((work) => {
      this._renderWorkoutMarker(work);
    });
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –∫–∞—Ä—Ç–µ
  _showForm(mapE) {
    this._mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  // –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ –∫–∞—Ä—Ç–µ
  _toggleElevationField() {
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden"); // —É–¥–∞–ª—è–µ—Ç –∫–ª–∞—Å—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden"); // —É–¥–∞–ª—è–µ—Ç –∫–ª–∞—Å—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  }

  _getReset() {
    buttonReset.addEventListener("click", this.reset.bind(this));
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _newWorkout(e) {
    e.preventDefault();

    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));
    const allPositiv = (...inputs) => inputs.every((inp) => inp > 0);

    // –ü–æ–ª—É–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this._mapEvent.latlng;
    let workouts;

    if (type === "running") {
      const cadence = +inputCadence.value;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
      if (
        !validInputs(distance, duration, cadence) ||
        !allPositiv(distance, duration, cadence)
      ) {
        return alert("Input positive number");
      }
      workouts = new Running([lat, lng], distance, duration, cadence);
    }

    if (type === "cycling") {
      const elevation = +inputElevation.value;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositiv(distance, duration)
      ) {
        return alert("Input positive number");
      }
      workouts = new Cycling([lat, lng], distance, duration, duration);
    }

    this._workouts.push(workouts);
    console.log(this._workouts);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, —Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–µ–≥–∞

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, —Ç–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

    // –†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    this._renderWorkoutMarker(workouts);

    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this._renderWorkoutList(workouts);

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
    this._hideForm();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ local storage
    this._setLocalStorage();

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    this._getReset();
  }

  _renderWorkoutMarker(workout) {
    L.marker(workout.coords, { draggable: true })
      .addTo(this._map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: true,
          // closeOnClick: false,
          className: "mark-popup",
        }),
      )
      .setPopupContent(
        `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${workout.description}`,
      )
      .openPopup();
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    form.style.display = "none";
    form.classList.add("hidden");
    setTimeout(() => (form.style.display = "grid"), 1000);
  }

  //  –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  _renderWorkoutList(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>`;

    if (workout.type === "running") {
      html += `<div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.pace.toFixed(1)}</span>
      <span class="workout__unit">–º–∏–Ω/–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">ü¶∂üèº</span>
      <span class="workout__value">${workout.cadence}</span>
      <span class="workout__unit">–∫–∞–¥/–∫–º</span>
    </div>
  </li>`;
    }

    if (workout.type === "cycling") {
      html += `<div class="workout__details">
    <span class="workout__icon">‚ö°Ô∏è</span>
    <span class="workout__value">${workout.speed.toFixed(1)}</span>
    <span class="workout__unit">–∫–º/—á</span>
  </div>
  <div class="workout__details">
    <span class="workout__icon">‚õ∞</span>
    <span class="workout__value">${workout.elevationGain}</span>
    <span class="workout__unit">–º</span>
  </div>
  </li>`;
    }
    form.insertAdjacentHTML("afterend", html);
  }
  _moveToPopup(e) {
    const workoutEl = e.target.closest(".workout");
    console.log(workoutEl);

    if (!workoutEl) return;

    const workout = this._workouts.find(
      (work) => work.id === workoutEl.dataset.id,
    );

    this._map.setView(workout.coords, 13, {
      animate: true,
      pan: {
        duration: 1,
      },
    });
  }
  _setLocalStorage() {
    localStorage.setItem("workouts", JSON.stringify(this._workouts));
  }

  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));

    if (!data) return;

    this._workouts = data;

    this._workouts.forEach((work) => {
      this._renderWorkoutList(work);
    });
  }

  reset() {
    localStorage.removeItem("workouts");
    location.reload();
  }
}

const app = new App();
